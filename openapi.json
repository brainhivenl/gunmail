{
  "openapi": "3.0.0",
  "info": {
    "title": "Mailgun API",
    "description": "Introduction\n=======\n\nThe Mailgun API is built on HTTP. Our API is RESTful and it:\n\n* Uses predictable, resource-oriented URLs.\n* Uses built-in HTTP capabilities for passing parameters and authentication.\n* Responds with standard HTTP response codes to indicate errors.\n* Returns JSON.\n\nMailgun has published [Libraries](https://documentation.mailgun.com/en/latest/libraries.html#libraries) for various languages. You may use our libraries, or your favorite HTTP/REST library available for your programming language, to make HTTP calls to Mailgun. Visit our Libraries page to see HTTP REST libraries we recommend.\n\nTo give you an idea of how to use the API, we have annotated our documentation with code samples written in several popular programming languages. Use the language selector at the top to switch between them.\n\nOur samples from [quickstart](https://documentation.mailgun.com/en/latest/quickstart.html), [User Manual](https://documentation.mailgun.com/en/latest/user_manual.html#user-manual), and [API Reference](https://documentation.mailgun.com/en/latest/api_reference.html#api-reference) provide examples that will function. You’re welcome to copy/paste and run the script to see the API in action.\n\n## Base URL\n\nAll API URLs referenced in this documentation start with the following base part:\n> https://api.mailgun.net/v3\n\nYour Mailgun account may contain several email domains. To avoid passing the domain name as a query parameter, most API URLs must include the name of the domain you’re interested in:\n> https://api.mailgun.net/v3/mydomain.com\n\n## Authentication\n\nWhen you sign up for an account, you are given an API key. You authenticate to the Mailgun API by providing your API key in the request. You can manage your API key in the “Security” tab under the Account section of the Control Panel.\n\nAuthentication to the API occurs via [HTTP Basic Auth](http://en.wikipedia.org/wiki/Basic_access_authentication). Use `api` as the user name and your API key is the password. Here is how you use basic HTTP auth with curl:\n> curl --user 'api:key-3ax6xnjp29jd6fds4gc373sgvjxteol0'\n\nOr you can try the following API call right from your browser:\n> https://api:key-3ax6xnjp29jd6fds4gc373sgvjxteol0@api.mailgun.net/v3/samples.mailgun.org/log\n\n**Warning:** Keep your API key secret!\n\n## Date Format\n\nMailgun returns JSON for all API calls. JSON does not have a built-in date type, dates are passed as strings encoded according to [RFC 2822#page-14](https://tools.ietf.org/html/rfc2822.html#page-14). This format is native to JavaScript and is also supported by most programming languages out of the box:\n\n> 'Thu, 13 Oct 2011 18:02:00 GMT'\n\n## Errors\n\n| Code               | Description                                               |\n|--------------------|-----------------------------------------------------------|\n| 200                | Everything worked as expected                             |\n| 400                | Bad Request - Often missing a required parameter          |\n| 401                | Unauthorized - No valid API key provided                  |\n| 402                | Request Failed - Parameters were valid but request failed |\n| 404                | Not Found - The requested item doesn’t exist              |\n| 500, 502, 503, 504 | Server Errors - something is wrong on Mailgun’s end       |\n\n## Webhooks\n\nMailgun can also POST data to your application when events (opens, clicks, bounces, etc.) occur or when you use Routes. You can read more about webhooks and [Routes](https://documentation.mailgun.com/en/latest/user_manual.html#um-routes) in the [User Manual](https://documentation.mailgun.com/en/latest/user_manual.html#user-manual).\n\n## Mailgun Regions\n\nUsing a single account and billing plan, you can choose to provision new sending domains in the EU environment. Message data never leaves the region in which it is processed. Only a limited amount of account data is replicated globally, giving you a single account from which to manage domains in both the US and the EU. Here are the specifics on the type of data that is replicated globally versus what is region-bound.\n\n| Global                                                                                                  | Region-Bound (US / EU)                                                                                                             |\n|---------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------|\n| Account Information, User Accounts, Billing Details (invoices/plan information), API Keys, Domain Names | Domain Metadata (e.g. SMTP credentials), Messages, Event Logs, Suppressions, Mailing Lists, Tags, Statistics, Routes, IP Addresses |\n\nThe endpoints you will use for sending/receiving/tracking messages in the EU are below:\n\n| Service                      | US Endpoint      | EU Endpoint         |\n|------------------------------|------------------|---------------------|\n| REST API                     | api.mailgun.net  | api.eu.mailgun.net  |\n| Outgoing SMTP Server         | smtp.mailgun.org | smtp.eu.mailgun.org |\n| Inbound SMTP Server (Routes) | mxa.mailgun.org  | mxa.eu.mailgun.org  |\n| Inbound SMTP Server (Routes) | mxb.mailgun.org  | mxb.eu.mailgun.org  |\n| Open/Click Tracking Endpoint | mailgun.org      | eu.mailgun.org      |",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "http://{{base_url}}"
    },
    {
      "url": "https://api.mailgun.net"
    }
  ],
  "tags": [
    {
      "name": "Messages",
      "description": "## Sending\n\nThere are two ways to send emails using Mailgun API:\n\n* You can pass the components of the messages such as `To`, `From`, `Subject`, HTML and text parts, attachments, etc. Mailgun will build a MIME representation of the message and send it. This is the preferred method.\n* You can also build a MIME string yourself using a MIME library for your programming language and submit it to Mailgun.\n\n> *Note:* You can also use good old SMTP to send messages. But you will have to specify all advanced sending options via [MIME headers](https://documentation.mailgun.com/en/latest/user_manual.html#passing-sending-options)"
    },
    {
      "name": "Domains",
      "description": "This API allows you to create, access, and validate domains programmatically."
    },
    {
      "name": "IPs",
      "description": "The IP API endpoint allows you to access information regarding the IPs allocated to your Mailgun account that are used for outbound sending.\n\n> Note: You can manage your IPs from the Control Panel. Click on [IP Management](https://app.mailgun.com/app/ip_management) in the settings dropdown menu."
    },
    {
      "name": "Events",
      "description": "Mailgun tracks every event that happens to your emails and makes this data available to you through the Events API. Mailgun retains this detailed data for two days for free accounts and 30 days for paid accounts. You can query the data and traverse through the result pages as explained below.\n\nA request should define a time range and can specify a set of filters to apply. In response, a page of events is returned along with URLs that can be used to retrieve the next and previous result pages. To traverse the entire range, you should keep requesting the next page URLs returned along with result pages until an empty result page is reached.\n\nBoth next and previous page URLs are always returned, even when retrieving one of them makes no sense. There are two such cases: previous page URL for the first result page, and next page URL for the last result page; requesting these URLs always returns an empty result page.\n\n## Viewing Stored Messages\n\nTo access the contents of the stored messages, copy the API URL of the message into a browser. The API URL can be found in the expanded log entry under the “storage” section. For the username, enter “api” and provide an API key for the password in order to view the parsed message.\n\nTo view the raw MIME, the message’s Mailgun storage key will be needed. Run the following python script with the storage key as a parameter. The script will retrieve the message from Mailgun. In the script the message is saved to “message.eml”, which can then be opened in Mozilla Thunderbird for analysis.\n\n## Time Range\n\nThe request time range should be given by a beginning timestamp and either an end timestamp or a search direction. If an end timestamp is not given, a search direction must be provided.\n\nIf the range end timestamp is provided then the relation between the beginning and the end timestamps determines the direction - ascending or descending - in which events are going to be traversed. E.g. if the end timestamp is less (older) than the beginning timestamp, then result pages are returned from newer to older and events on the pages are sorted in the descending order of their timestamps.\n\nIf the end timestamp is not provided, the direction must be specified. Depending on the range direction, the result page traversal behaves differently:\n\n* If the range is descending then the end timestamp is determined by the user tariff plan retention period.\n* If the range is ascending then events will continue to be recorded but will not show in the current request time range pages that are provided. So after the most recent events have been retrieved and an empty result page has been reached, then requesting next page URL returned with the last page some time later will return events that occurred since then. And this can go on indefinitely.\n\n> **Warning**:  Even though it seems that real-time event polling can be implemented by traversing next URLs of an ascending time range that has no explicit end timestamp, it is not that simple! Please refer to [Event Polling](https://documentation.mailgun.com/en/latest/api-events.html#event-polling) for the proper way to do it.\n\nIf both the end range date and the direction of the search are specified then they should agree with each other, otherwise the request will return an error.\n\n## Event Polling\n\nIn our system, events are generated by physical hosts and follow different routes to the event storage. Therefore, the order in which they appear in the storage and become retrievable - via the events API - does not always correspond to the order in which they occur. Consequently, this system behavior makes straight forward implementation of event polling miss some events. The page of most recent events returned by the events API may not contain all the events that occurred at that time because some of them could still be on their way to the storage engine. When the events arrive and are eventually indexed, they are inserted into the already retrieved pages which could result in the event being missed if the pages are accessed too early (i.e. before all events for the page are available).\n\nTo ensure that all your events are retrieved and accounted for please implement polling the following way:\n1. Make a request to the events API specifying an ascending time range that begins some time in the past (e.g. half an hour ago);\n2. Retrieve a result page;\n3. Check the timestamp of the last event on the result page. If it is older than some threshold age (e.g. half an hour) then go to step (4), otherwise proceed with step (6);\n4. The result page is trustworthy, use events from the page as you please;\n5. Make a request using the next page URL retrieved with the result page, proceed with step (2);\n6. Discard the result page for it is not trustworthy;\n7. Pause for some time (at least 15 seconds);\n8. Repeat the previous request, and proceed with step (2).\n\n## Query Options\n\n| Parameter | Description                                                                                                                                                                                                                                                                     |\n|-----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| begin     | The beginning of the search time range. It can be specified as a string (see [Date Format](https://documentation.mailgun.com/en/latest/api-intro.html#date-format) or linux epoch seconds. Refer to [Time Range](https://documentation.mailgun.com/en/latest/api-events.html#time-range) for details.                                                                                                                              |\n| end       | The end of the search time range. It can be specified as a string (see [Date Format](https://documentation.mailgun.com/en/latest/api-intro.html#date-format) or linux epoch seconds. Refer to [Time Range](https://documentation.mailgun.com/en/latest/api-events.html#time-range) for details.                                                                                                                                    |\n| ascending | Defines the direction of the search time range and must be provided if the range end time is not specified. Can be either `yes` or `no`. Refer to [Time Range](https://documentation.mailgun.com/en/latest/api-events.html#time-range) for details.                                                                                                           |\n| limit     | Number of entries to return. (300 max)                                                                                                                                                                                                                                          |\n| <field>   | <field> is the name of the [Filter Field](https://documentation.mailgun.com/en/latest/api-events.html#filter-field). The value of the parameter should be a valid [Filter Expression](https://documentation.mailgun.com/en/latest/api-events.html#filter-expression). Several field filters can be specified in one request. If the same field is mentioned, more then once, then all its filter expressions are combined with AND operator. |\n\n\n## Filter Field\n\nLog records can be filtered by the following fields:\n\n| Fields     | Description                                                                                                                                                                                          |\n|------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| event      | An event type. For a complete list of all events written to the log see the [Event Types](https://documentation.mailgun.com/en/latest/api-events.html#event-types) table below.                                                                                                 |\n| list       | The email address of a mailing list the message was originally sent to.                                                                                                                              |\n| attachment | A name of an attached file.                                                                                                                                                                          |\n| from       | An email address mentioned in the from MIME header.                                                                                                                                                  |\n| message-id | A Mailgun message id returned by the messages API.                                                                                                                                                   |\n| subject    | A subject line.                                                                                                                                                                                      |\n| to         | An email address mentioned in the to MIME header.                                                                                                                                                    |\n| size       | Message size. Mostly intended to be used with range filtering expressions (see below).                                                                                                               |\n| recipient  | An email address of a particular recipient. Even though a message may be addressed to several recipients, delivery is tracked on per recipient basis and every event pertains to only one recipient. |\n| tags       | User defined tags.                                                                                                                                                                                   |\n| severity   | Temporary or Permanent. Used to filter events based on severity, if exists. (Currently failed events only)                                                                                           |\n\n## Filter Expression\nPossible filtering expressions are listed below:\n\n| Expression    | Description                                                                                                        |\n|---------------|--------------------------------------------------------------------------------------------------------------------|\n| foo bar       | Matches field values that contain both term `foo` and term `bar`.                                                      |\n| foo AND bar   | Same as above.                                                                                                     |\n| foo OR bar    | Matches field values that contain either term `foo` or term `bar`.                                                     |\n| “foo bar”     | Matches field values that literally contain `foo bar`.                                                               |\n| NOT foo       | Matches field values that do not contain term `foo`.                                                                 |\n| >10000        | Matches values that greater then `10000`. This filter can be applied to numeric fields only.                         |\n| >10000 < 20000 | Matches values that are greater then `10000` and less then `20000`. This filter can be applied to numeric fields only. |\n\nNote that more then one expression can be used as a filter value and parentheses can be used to specify grouping. E.g.: `(Hello AND NOT Rachel) OR (Farewell AND Monica)`.\n\n## Event Types\n\nMailgun tracks all of the events that occur throughout the system. Below are listed the events that you can retrieve using this API.\n\n| Event Type   | Description                                                                                                                                                                                                                                                                                                                                                                                                                                    |\n|--------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| accepted     | Mailgun accepted the request to send/forward the email and the message has been placed in queue.                                                                                                                                                                                                                                                                                                                                               |\n| rejected     | Mailgun rejected the request to send/forward the email.                                                                                                                                                                                                                                                                                                                                                                                        |\n| delivered    | Mailgun sent the email and it was accepted by the recipient email server.                                                                                                                                                                                                                                                                                                                                                                      |\n| failed       | Mailgun could not deliver the email to the recipient email server.  severity=permanent when a message is not delivered. There are several reasons why Mailgun stops attempting to deliver messages and drops them including: hard bounces, messages that reached their retry limit, previously unsubscribed/bounced/complained addresses, or addresses rejected by an ESP.  severity=temporary when a message is temporary rejected by an ESP. |\n| opened       | The email recipient opened the email and enabled image viewing. Open tracking must be enabled in the Mailgun control panel, and the CNAME record must be pointing to mailgun.org.                                                                                                                                                                                                                                                              |\n| clicked      | The email recipient clicked on a link in the email. Click tracking must be enabled in the Mailgun control panel, and the CNAME record must be pointing to mailgun.org.                                                                                                                                                                                                                                                                         |\n| unsubscribed | The email recipient clicked on the unsubscribe link. Unsubscribe tracking must be enabled in the Mailgun control panel.                                                                                                                                                                                                                                                                                                                        |\n| complained   | The email recipient clicked on the spam complaint button within their email client. Feedback loops enable the notification to be received by Mailgun.                                                                                                                                                                                                                                                                                          |\n| stored       | Mailgun has stored an incoming message                                                                                                                                                                                                                                                                                                                                                                                                         |\n\n## Event Structure\n\nSee [link](https://documentation.mailgun.com/en/latest/api-events.html#event-structure) on Documentation page."
    },
    {
      "name": "Stats",
      "description": "Mailgun collects many different events and generates event statistics which are available in your Control Panel. This data is also available via an API.\n\nThe statistics are calculated in hourly, daily and monthly resolution in UTC timezone.\n\nThe following retention policy is applied to the statistics:\n* Hourly stats are preserved for a month.\n* Daily stats are preserved for a year.\n* Monthly stats are stored throughout the lifespan of the domain.\n\n## Duration\n\nDuration is a string that represents a period of time with some resolution. It has a format [0-9]+[m,d,h] where\n\n* h - an hour\n* d - a day\n* m - a month\nExamples:\n\n* 24h - a period of 24 hours (a day) with hourly resolution\n* 1d - a period of 1 day with daily resolution\n* 2m - a period of 2 months with monthly resolution\n\n## Event Types\n\n| Event Type   | Description                                                                                                                                                                       |\n|--------------|-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| accepted     | Mailgun accepted the request to send/forward the email and the message has been placed in queue.                                                                                  |\n| delivered    | Mailgun sent the email and it was accepted by the recipient email server.                                                                                                         |\n| failed       | Mailgun could not deliver the email to the recipient email server.                                                                                                                |\n| opened       | The email recipient opened the email and enabled image viewing. Open tracking must be enabled in the Mailgun control panel, and the CNAME record must be pointing to mailgun.org. |\n| clicked      | The email recipient clicked on a link in the email. Click tracking must be enabled in the Mailgun control panel, and the CNAME record must be pointing to mailgun.org.            |\n| unsubscribed | The email recipient clicked on the unsubscribe link. Unsubscribe tracking must be enabled in the Mailgun control panel.                                                           |\n| complained   | The email recipient clicked on the spam complaint button within their email client. Feedback loops enable the notification to be received by Mailgun.                             |\n| stored       | Mailgun has stored an incoming message                                                                                                                                            |"
    },
    {
      "name": "Tags",
      "description": "Mailgun lets you tag each outgoing message with a custom value and provides statistics on the tag level. To tag a message you need to provide one or more `o:tag` parameter in the API. Tags are created on the fly but they are subject to a limit."
    },
    {
      "name": "Suppressions",
      "description": "Mailgun keeps three lists of addresses it blocks the delivery to: bounces, unsubscribes and complaints. These lists are populated automatically as Mailgun detects undeliverable addresses you try to send to and as recipients unsubscribe from your mailings or mark your emails as a spam (for ESPs that provide FBL). You can also add/remove addresses from any of these lists using the API.\n\n> Note This is the documentation for the new Suppressions API. The documentation for the previous version (/v2) will temporarily be available here: [bounces](https://documentation.mailgun.com/en/latest/api-bounces.html#api-bounces-old), [unsubscribes](https://documentation.mailgun.com/en/latest/api-unsubscribes.html#api-unsubscribes-old), [complaints](https://documentation.mailgun.com/en/latest/api-complaints.html#api-complaints-old)."
    },
    {
      "name": "Suppressions > Bounces"
    },
    {
      "name": "Suppressions > Complaints"
    },
    {
      "name": "Suppressions > Unsubscribes"
    },
    {
      "name": "Routes",
      "description": "Mailgun Routes are a powerful way to handle the incoming traffic. See [Routes](https://documentation.mailgun.com/en/latest/user_manual.html#um-routes) section in the User Manual to learn more about how they work. This API allows you to work with routes programmatically.\n\nRoutes are comprised of the following arguments:\n\n* A filter (when to do something).\n* A priority (in what order).\n* An action (what to do).\n\n## Filters\n\nRoute filters are expressions that determine when an action is triggered. You can create a filter based on the recipient of the incoming email, the headers in the incoming email or use a catch-all filter. Filters support regular expressions in the pattern to give you a lot of flexibility when creating them.\n\n**match_recipient(pattern)**\n\nMatches smtp recipient of the incoming message against the regular expression pattern. For example this will match all messages coming to any recipient at @bar.com:\n\n> match_recipient(\".*@bar.com\")\n\n**match_header(header, pattern)**\n\nSimilar to `match_recipient` but instead of looking at a message recipient, it applies the pattern to an arbitrary MIME header of the message. For this will match any message with a word “support” in its subject:\n\n> (\"subject\", \".*support\")\n\n**catch_all()**\n\nMatches if no preceeding routes matched. Usually you need to use it in a route with a lowest priority, to make sure it evaluates last.\n\n## Actions\n\nIf a route expression evaluates to true, Mailgun executes the corresponding action. Currently you can use the following three actions in your routes: `forward()`, `store()` and `stop()`.\n\n**forward(destination)**\n\nForwards the message to a specified destination, which can be another email address or a URL. A few examples:\n\n> forward(\"mailbox@myapp.com\")\nforward(\"http://myapp.com/messages\")\n\n**store(notification endpoint)**\n\nStores the message temporarily (for up to 3 days) on Mailgun’s servers so that you can retrieve them later. This is helpful for large messages that may cause time outs or if you just want to retrieve them later.\n\nYou can specify a URL and we will notify you when the email arrives along with a URL where you can use to retrieve the message:\n\n> store(notify=\"http://mydomain.com/callback\")\n\nYou can see a full list of parameters we will post to your URL in the [Routes](https://documentation.mailgun.com/en/latest/user_manual.html#um-routes) section of the User Manual. You can also get the locations of messages through the [Events API](https://documentation.mailgun.com/en/latest/api-events.html#api-events) and then retrieve the message through the [Messages API](https://documentation.mailgun.com/en/latest/api-sending.html#api-sending-messages).\n\n**stop()**\n\nSimply stops the priority waterfall so the subsequent routes will not be evaluated. Without a stop() action executed, all lower priority Routes will also be evaluated."
    },
    {
      "name": "Webhooks"
    },
    {
      "name": "Mailing Lists"
    },
    {
      "name": "Email Validation"
    }
  ],
  "paths": {
    "/{mydomain}/messages": {
      "post": {
        "tags": [
          "Messages"
        ],
        "operationId": "sendMessages",
        "summary": "Send message with MIME",
        "description": "Posts a message in MIME format. Note: you will need to build a MIME string yourself. Use a MIME library for your programming language to do this. Pass the resulting MIME string as `message` parameter.\n\n\n| Parameter         | Description                                                                                                                                                                              |\n|-------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| to                | Email address of the recipient(s). Example: `\"Bob <bob@host.com>\"`. You can use commas to separate multiple recipients. Make sure to include all `To`, `Cc` and `Bcc` recipients of the message. |\n| message           | MIME string of the message. Make sure to use `application/x-www-form-urlencoded` to send this as a file upload.                                                                                          |\n| o:tag             | Tag string. See [Tagging](https://documentation.mailgun.com/en/latest/user_manual.html#tagging) for more information.                                                                                                                                            |\n| o:deliverytime    | Desired time of delivery. See [Date Format](https://documentation.mailgun.com/en/latest/api-intro.html#date-format). Note: Messages can be scheduled for a maximum of 3 days in the future.                                                                        |\n| o:dkim            | Enables/disabled DKIM signatures on per-message basis. Pass `yes` or `no`                                                                                                                    |\n| o:testmode        | Enables sending in test mode. Pass `yes` if needed. See [Sending in Test Mode](https://documentation.mailgun.com/en/latest/user_manual.html#manual-testmode)                                                                                                               |\n| o:tracking        | Toggles tracking on a per-message basis, see [Tracking Messages](https://documentation.mailgun.com/en/latest/user_manual.html#tracking-messages) for details. Pass `yes` or `no`.                                                                                              |\n| o:tracking-clicks | Toggles clicks tracking on a per-message basis. Has higher priority than domain-level setting. Pass `yes`, `no` or `htmlonly`.                                                                 |\n| o:tracking-opens  | Toggles opens tracking on a per-message basis. Has higher priority than domain-level setting. Pass `yes` or `no`.                                                                            |\n| h:X-My-Header     | `h:` prefix followed by an arbitrary value allows to append a custom MIME header to the message (`X-My-Header` in this case). For example, `h:Reply-To` to specify Reply-To address.           |\n| v:my-var          | `v:` prefix followed by an arbitrary name allows to attach a custom JSON data to the message. See [Attaching Data to Messages](https://documentation.mailgun.com/en/latest/user_manual.html#manual-customdata) for more information.                                         |",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "example": "test@gmail.com"
                  },
                  "to": {
                    "type": "string",
                    "example": "test@mailgun.com"
                  },
                  "subject": {
                    "type": "string",
                    "example": "attachment test"
                  },
                  "text": {
                    "type": "string",
                    "example": "the body"
                  },
                  "attachment": {
                    "type": "string",
                    "format": "binary"
                  },
                  "cc": {
                    "type": "string",
                    "example": "mkane@mailgun.com"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "application/x-www-form-urlencoded"
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "{{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string",
                  "example": "Content-Type, x-requested-with"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string",
                  "example": "GET, POST, PUT, DELETE, OPTIONS"
                }
              },
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string",
                  "example": "*"
                }
              },
              "Access-Control-Max-Age": {
                "schema": {
                  "type": "integer",
                  "example": "600"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Content-Disposition": {
                "schema": {
                  "type": "string",
                  "example": "inline"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "136"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Tue, 21 Aug 2018 19:37:28 GMT"
                }
              },
              "Server": {
                "schema": {
                  "type": "string",
                  "example": "nginx"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "examples": {
                  "example-0": {
                    "summary": "Sending a message with HTML and text parts, and attachments",
                    "value": {
                      "id": "<20180821193728.1.6AD4EE2093B45F30@sandbox974aad6390954e39b88f4bfa8cf184c3.mailgun.org>",
                      "message": "Queued. Thank you."
                    }
                  },
                  "example-1": {
                    "summary": "Sending a plain text message",
                    "value": {
                      "message": "Queued. Thank you.",
                      "id": "<20111114174239.25659.5817@samples.mailgun.org>"
                    }
                  }
                }
              }
            }
          }
        }
      }
    },
    "/{mydomain}/messages/{message_ID}": {
      "get": {
        "tags": [
          "Messages"
        ],
        "operationId": "getMessage",
        "summary": "Retrieving Stored Messages",
        "description": "To retrieve an inbound message that has been stored via the `store()` action, use the URL found in the stored event (which you can find through the Events API, or in the notify webhook set when creating the store action (`store(notify=\"http://mydomain.com/callback\")`).\n\n* By default the message will be returned in JSON form with parsed parts. Links to the attachments will be included.\n* You can also retrieve the full raw mime message (attachments and all) if you make the request to the URL with the `Accept` header set to `message/rfc2822`.\n* Stored messages are encoded with [Quoted-printable](https://en.wikipedia.org/wiki/Quoted-printable) encoding. Decoding samples are available in the examples section below.\n\n\nThese are the parameters of the JSON returned from a GET request to a stored message url.\n\n| Parameter          | Type   | Description                                                                                                                                                                                                      |\n|--------------------|--------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| recipients         | string | recipient of the message as reported by `MAIL` `TO` during SMTP chat.                                                                                                                                                |\n| sender             | string | sender of the message as reported by `MAIL` `FROM` during SMTP chat. Note: this value may differ from `From` MIME header.                                                                                              |\n| from               | string | sender of the message as reported by `From` message header, for example “Bob Lee <blee@mailgun.net>”.                                                                                                              |\n| subject            | string | subject string.                                                                                                                                                                                                  |\n| body-plain         | string | text version of the email. This field is always present. If the incoming message only has HTML body, Mailgun will create a text representation for you.                                                          |\n| stripped-text      | string | text version of the message without quoted parts and signature block (if found).                                                                                                                                 |\n| stripped-signature | string | the signature block stripped from the plain text message (if found).                                                                                                                                             |\n| body-html          | string | HTML version of the message, if message was multipart. Note that all parts of the message will be posted, not just text/html. For instance if a message arrives with “foo” part it will be posted as “body-foo”. |\n| stripped-html      | string | HTML version of the message, without quoted parts.                                                                                                                                                               |\n| attachments        | string | contains a json list of metadata objects, one for each attachment, see below.                                                                                                                                    |\n| message-headers    | string | list of all MIME headers dumped to a json string (order of headers preserved).                                                                                                                                   |\n| content-id-map     | string | JSON-encoded dictionary which maps Content-ID (CID) of each attachment to the corresponding `attachment-x` parameter. This allows you to map posted attachments to tags like `<img src='cid'>` in the message body.  |\n\n\n> Note Do not rely on the `body-plain`, `stripped-text`, and `stripped-signature` fields for HTML sanitization. These fields merely provide content from the text/plain portion of an incoming message. This content may contain unescaped HTML.\n\nThe attachments JSON contains the following items.\n\n| Parameter    | Type    | Description                                                                       |\n|--------------|---------|-----------------------------------------------------------------------------------|\n| size         | integer | indicates the size of the attachment in bytes.                                    |\n| url          | string  | contains the url where the attachment can be found. This does not support DELETE. |\n| name         | string  | the name of the attachment                                                        |\n| content-type | string  | the content type of the attachment                                                |\n\n\nThese are the parameters when the `Accept` header is set to `message/rfc2822`\n\n| Parameter | Type   | Description                                                                                    |\n|-----------|--------|------------------------------------------------------------------------------------------------|\n| recipient | string | recipient of the message.                                                                      |\n| sender    | string | sender of the message as reported by SMTP MAIL FROM.                                           |\n| from      | string | sender of the message as reported by `From` message header, for example “Bob <bob@example.com>”. |\n| subject   | string | subject string.                                                                                |\n| body-mime | string | full MIME envelope. You will need a MIME parsing library to process this data.                 |",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "message_ID",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/StoredMessage"
                }
              }
            }
          }
        }
      }
    },
    "/domains": {
      "get": {
        "tags": [
          "Domains"
        ],
        "operationId": "getDomains",
        "summary": "Get domains",
        "description": "Returns a list of domains under your account in JSON. See examples.\n\n| Parameter | Description                                           |\n|-----------|-------------------------------------------------------|\n| limit     | Maximum number of records to return. (100 by default) |\n| skip      | Number of records to skip. (0 by default)             |",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetDomainsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Domains"
        ],
        "operationId": "createDomain",
        "summary": "Create new domain",
        "description": "Create a new domain.\n\n| Parameter            | Description                                                                                                                                                                                                                                                                                       |\n|----------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| name                 | Name of the domain (ex. domain.com)                                                                                                                                                                                                                                                               |\n| smtp_password        | Password for SMTP authentication                                                                                                                                                                                                                                                                  |\n| spam_action          | `disabled`, `block`, or `tag`  If disabled, no spam filtering will occur for inbound messages.  If block, inbound spam messages will not be delivered.  If tag, inbound messages will be tagged with a spam header. See [Spam Filter](https://documentation.mailgun.com/en/latest/user_manual.html#um-spam-filter).  The default is `disabled`.                                          |\n| wildcard             | true or false Determines whether the domain will accept email for sub-domains.  The default is false.                                                                                                                                                                                             |\n| force_dkim_authority | true or false  If set to true, the domain will be the DKIM authority for itself even if the root domain is registered on the same mailgun account  If set to false, the domain will have the same DKIM authority as the root domain registered on the same mailgun account  The default is false. |",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Name of the domain (ex. domain.com)"
                  },
                  "smtp_password": {
                    "type": "string",
                    "description": "Password for SMTP authentication"
                  },
                  "spam_action": {
                    "type": "string",
                    "description": "disabled, block, or tag\n\nIf disabled, no spam filtering will occur for inbound messages.\n\nIf block, inbound spam messages will not be delivered.\n\nIf tag, inbound messages will be tagged with a spam header. See Spam Filter.\n\nThe default is disabled."
                  },
                  "wildcard": {
                    "type": "string",
                    "description": "true or false Determines whether the domain will accept email for sub-domains.\n\nThe default is false."
                  },
                  "force_dkim_authority": {
                    "type": "string",
                    "description": "true or false\n\nIf set to true, the domain will be the DKIM authority for itself even if the root domain is registered on the same mailgun account\n\nIf set to false, the domain will have the same DKIM authority as the root domain registered on the same mailgun account\n\nThe default is false."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainResponse"
                }
              }
            }
          }
        }
      }
    },
    "/domains/{mydomain}": {
      "get": {
        "tags": [
          "Domains"
        ],
        "operationId": "getDomain",
        "summary": "Get single domain",
        "description": "Returns a single domain, including credentials and DNS records.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Domains"
        ],
        "operationId": "deleteDomain",
        "summary": "Delete domain",
        "description": "Deletes a domain from your account",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/domains/{mydomain}/verify": {
      "put": {
        "tags": [
          "Domains"
        ],
        "operationId": "verifyDomain",
        "summary": "Verify domain",
        "description": "Verifies and returns a single domain, including credentials and DNS records. If the domain is successfully verified the message should be the following: _Domain DNS records have been updated_. For more information on verifying domains, visit the Mailgun [User Manual](https://documentation.mailgun.com/en/latest/user_manual.html#verifying-your-domain).",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DomainResponse"
                }
              }
            }
          }
        }
      }
    },
    "/domains/{mydomain}/credentials": {
      "get": {
        "tags": [
          "Domains"
        ],
        "operationId": "getCredentials",
        "summary": "Get SMTP credentials for a domain",
        "description": "Returns a list of SMTP credentials for the defined domain.\n\n| Parameter | Description                                           |\n|-----------|-------------------------------------------------------|\n| limit     | Maximum number of records to return. (100 by default) |\n| skip      | Number of records to skip. (0 by default)             |",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Maximum number of records to return; 100 by default",
            "example": "100"
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Number of records to skip; 0 by default.",
            "example": "0"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetCredentialsResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Domains"
        ],
        "operationId": "createSmtpCredentials",
        "summary": "Create new SMTP credentials",
        "description": "Creates a new set of SMTP credentials for the defined domain.\n\n| Parameter | Description                                                 |\n|-----------|-------------------------------------------------------------|\n| login     | The user name, for example `bob.bar`                          |\n| password  | A password for the SMTP credentials. (Length Min 5, Max 32) |",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "login": {
                    "type": "string",
                    "description": "The user name, for example bob.bar"
                  },
                  "password": {
                    "type": "string",
                    "description": "A password for the SMTP credentials. (Length Min 5, Max 32)"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        }
      }
    },
    "/domains/{mydomain}/credentials/{login}": {
      "put": {
        "tags": [
          "Domains"
        ],
        "operationId": "updateSmtpCredentials",
        "summary": "Update SMTP credentials",
        "description": "Updates the specified SMTP credentials. Currently only the password can be changed.\n\n| Parameter | Description                                                 |\n|-----------|-------------------------------------------------------------|\n| password  | A password for the SMTP credentials. (Length Min 5, Max 32) |",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "password": {
                    "type": "string",
                    "description": "A password for the SMTP credentials. (Length Min 5, Max 32)"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "login",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SuccessResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Domains"
        ],
        "operationId": "deleteSmtpCredentials",
        "summary": "Delete SMTP credentials",
        "description": "Deletes the defined SMTP credentials.\n\n> Note: Mailgun imposes a rate limit for the Domains API endpoint. Users may issue no more than 300 requests per minute, per account. See the resultant rate limit response below.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "login",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema":{
                    "$ref": "#/components/schemas/DeleteCredentialsResponse"
                }
              }
            }
          }
        }
      }
    },
    "/domains/{mydomain}/connection": {
      "get": {
        "tags": [
          "Domains"
        ],
        "operationId": "getDomainConnection",
        "summary": "Get domain connection settings",
        "description": "Returns delivery connection settings for the defined domain.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema":{
                    "$ref": "#/components/schemas/GetConnectionResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Domains"
        ],
        "operationId": "updateDomainConnection",
        "summary": "Update domain delivery connection settings",
        "description": "Updates the specified delivery connection settings for the defined domain.\n\n| Parameter         | Description                                                                                                                                                                                                                                                                                                                                                       |\n|-------------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| require_tls       | true or false  If set to true, this requires the message only be sent over a TLS connection. If a TLS connection can not be established, Mailgun will not deliver the message.  If set to false, Mailgun will still try and upgrade the connection, but if Mailgun cannot, the message will be delivered over a plaintext SMTP connection.  The default is false. |\n| skip_verification | true or false  If set to true, the certificate and hostname will not be verified when trying to establish a TLS connection and Mailgun will accept any certificate during delivery.   If set to false, Mailgun will verify the certificate and hostname. If either one can not be verified, a TLS connection will not be established.   The default is false.     |",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "require_tls": {
                    "type": "boolean",
                    "description": "true or false\n\nIf set to true, this requires the message only be sent over a TLS connection. If a TLS connection can not be established, Mailgun will not deliver the message.\n\nIf set to false, Mailgun will still try and upgrade the connection, but if Mailgun cannot, the message will be delivered over a plaintext SMTP connection.\n\nThe default is false.",
                    "example": "false"
                  },
                  "skip_verification": {
                    "type": "boolean",
                    "description": "true or false\n\nIf set to true, the certificate and hostname will not be verified when trying to establish a TLS connection and Mailgun will accept any certificate during delivery.\n\nIf set to false, Mailgun will verify the certificate and hostname. If either one can not be verified, a TLS connection will not be established.\n\nThe default is false.",
                    "example": "false"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {
                "schema":{
                    "$ref": "#/components/schemas/ConnectionUpdate"
                }
              }
            }
          }
        }
      }
    },
    "/domains/{mydomain}/tracking": {
      "get": {
        "tags": [
          "Domains"
        ],
        "operationId": "getDomainTracking",
        "summary": "Get domain tracking settings",
        "description": "Returns tracking settings for a domain.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/domains/{mydomain}/tracking/open": {
      "put": {
        "tags": [
          "Domains"
        ],
        "operationId": "updateDomainTracking",
        "summary": "Update domain tracking settings for OPENS",
        "description": "Updates the open tracking settings for a domain.\n\n| Parameter | Description |\n|-----------|-------------|\n| active    | `yes` or `no`   |",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "type": "string",
                    "description": "`yes` or `no`"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/domains/{mydomain}/tracking/click": {
      "put": {
        "tags": [
          "Domains"
        ],
        "operationId": "updateDomainClickTracking",
        "summary": "Update domain tracking settings for CLICKS",
        "description": "| Parameter | Description                                                                                                                                                                                        |\n|-----------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| active    | yes, no, or htmlonly  If set to yes, links will be overwritten and pointed to our servers so we can track clicks.  If set to htmlonly, links will only be rewritten in the HTML part of a message. |",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "type": "string",
                    "description": "yes, no, or htmlonly\n\nIf set to yes, links will be overwritten and pointed to our servers so we can track clicks.\n\nIf set to htmlonly, links will only be rewritten in the HTML part of a message."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/domains/{mydomain}/tracking/unsubscribe": {
      "put": {
        "tags": [
          "Domains"
        ],
        "operationId": "updateDomainUnsubscribeTracking",
        "summary": "Update domain tracking settings for UNSUBSCRIBES",
        "description": "| Parameter   | Description                                                                                                                                                                                                                                                                                                            |\n|-------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| active      | true or false.                                                                                                                                                                                                                                                                                                         |\n| html_footer | Custom HTML version of unsubscribe footer.                                                                                                                                                                                                                                                                             |\n| text_footer | Custom text version of unsubscribe footer.Mailgun can automatically provide an unsubscribe footer in each email you send and also provides you with several unsubscribe variables. You can customize your unsubscribe footer by editing the settings in the Control Panel. See Tracking Unsubscribes for more details. |",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "active": {
                    "type": "string",
                    "description": "true or false."
                  },
                  "html_footer": {
                    "type": "string",
                    "description": "Custom HTML version of unsubscribe footer."
                  },
                  "text_footer": {
                    "type": "string",
                    "description": "Custom text version of unsubscribe footer."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/domains/{mydomain}/dkim_authority": {
      "put": {
        "tags": [
          "Domains"
        ],
        "operationId": "updateDkimAuthority",
        "summary": "Change DKIM Authority",
        "description": "| Parameter | Description                                                                                                                                                                                                                                                                                                         |\n|-----------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| self      | true or false  Change the DKIM authority for a domain.  If set to true, the domain will be the DKIM authority for itself even if the root domain is registered on the same mailgun account  If set to false, the domain will have the same DKIM authority as the root domain registered on the same mailgun account |\n\n\n> Note: Use with caution: Do not forget to change the corresponding DNS record. It can take 24-48 hours for DNS changes to propagate. Changing the DKIM autority of an active domain affects its current deliveriability.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "self": {
                    "type": "string",
                    "description": "_true_ or _false_\n\nChange the DKIM authority for a domain.\n\nIf set to _true_, the domain will be the DKIM authority for itself even if the root domain is registered on the same mailgun account\n\nIf set to _false_, the domain will have the same DKIM authority as the root domain registered on the same mailgun account"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/ips": {
      "get": {
        "tags": [
          "IPs"
        ],
        "operationId": "getIps",
        "summary": "Get all IPs for an account",
        "description": "| Parameter | Description                                                             |\n|-----------|-------------------------------------------------------------------------|\n| dedicated | Return only dedicated IPs if set to true. (all are returned by default) |",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "items": [
                    "192.161.0.1",
                    "192.168.0.2"
                  ],
                  "total_count": 2
                }
              }
            }
          }
        }
      }
    },
    "/ips/{ip}": {
      "get": {
        "tags": [
          "IPs"
        ],
        "operationId": "getIp",
        "summary": "Get specific IP",
        "description": "Returns information about the specified IP.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "ip",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "ip": "192.161.0.1",
                  "dedicated": true,
                  "rdns": "luna.mailgun.net"
                }
              }
            }
          }
        }
      }
    },
    "/v3/domains/{mydomain}/ips": {
      "get": {
        "tags": [
          "IPs"
        ],
        "operationId": "getIpForDomain",
        "summary": "Get list of IPs for a domain",
        "description": "Returns a list of IPs currently assigned to the specified domain.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "items": [
                    "192.161.0.1",
                    "192.168.0.2"
                  ],
                  "total_count": 2
                }
              }
            }
          }
        }
      }
    },
    "/domains/{mydomain}/ips": {
      "post": {
        "tags": [
          "IPs"
        ],
        "operationId": "assignIpToDomain",
        "summary": "Assign IP to domain",
        "description": "Assign a dedicated IP to the domain specified.\n\n> **Note**: Only dedicated IPs can be assigned to a domain.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "ip": {
                    "type": "string",
                    "description": "IP address that should be assigned to the domain pool."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "success"
                }
              }
            }
          }
        }
      }
    },
    "/domains/{mydomain}/ips/{ip}": {
      "delete": {
        "tags": [
          "IPs"
        ],
        "operationId": "unassignIpFromDomain",
        "summary": "Unassign IP from a domain",
        "description": "Unassign an IP from the domain specified.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "ip",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "success"
                }
              }
            }
          }
        }
      }
    },
    "/v3/{mydomain}/events": {
      "get": {
        "tags": [
          "Events"
        ],
        "operationId": "getEvents",
        "summary": "Get events",
        "description": "Get events for a domain.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "items": [
                    {
                      "tags": [],
                      "id": "czsjqFATSlC3QtAK-C80nw",
                      "timestamp": 1376325780.160809,
                      "envelope": {
                        "sender": "me@samples.mailgun.org",
                        "transport": ""
                      },
                      "event": "accepted",
                      "campaigns": [],
                      "user-variables": {},
                      "flags": {
                        "is-authenticated": true,
                        "is-test-mode": false
                      },
                      "message": {
                        "headers": {
                          "to": "foo@example.com",
                          "message-id": "20130812164300.28108.52546@samples.mailgun.org",
                          "from": "Excited User <me@samples.mailgun.org>",
                          "subject": "Hello"
                        },
                        "attachments": [],
                        "recipients": [
                          "foo@example.com",
                          "baz@example.com",
                          "bar@example.com"
                        ],
                        "size": 69
                      },
                      "recipient": "baz@example.com",
                      "method": "http"
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{mydomain}/stats/total": {
      "get": {
        "tags": [
          "Stats"
        ],
        "operationId": "getDomainStats",
        "summary": "Get domain stats",
        "description": "Returns total stats for a given domain.\n\n| Parameter  | Description                                                                                                             |\n|------------|-------------------------------------------------------------------------------------------------------------------------|\n| event      | The type of the event. For a complete list of all events written to the log see the [Event Types](https://documentation.mailgun.com/en/latest/api-stats.html#event-types) table below. (Required) |\n| start      | The starting time. Should be in [RFC 2822#page-14](https://tools.ietf.org/html/rfc2822.html#page-14) or unix epoch format. Default: 7 days from the current time.           |\n| end        | The ending date. Should be in [RFC 2822#page-14](https://tools.ietf.org/html/rfc2822.html#page-14) or unix epoch format. Default: current time.                             |\n| resolution | Can be either `hour`, `day` or `month`. Default: `day`                                                                          |\n| duration   | Period of time with resoluton encoded. See [Duration](https://documentation.mailgun.com/en/latest/api-stats.html#duration) for more info. If provided, overwrites the start date.              |",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "event",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "The type of the event. For a complete list of all events written to the log see the Event Types table below. (Required)",
            "example": "accepted"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "end": "Fri, 01 Apr 2012 00:00:00 UTC",
                  "resolution": "month",
                  "start": "Tue, 14 Feb 2012 00:00:00 UTC",
                  "stats": [
                    {
                      "time": "Tue, 14 Feb 2012 00:00:00 UTC",
                      "accepted": {
                        "outgoing": 10,
                        "incoming": 5,
                        "total": 15
                      },
                      "delivered": {
                        "smtp": 15,
                        "http": 5,
                        "total": 20
                      },
                      "failed": {
                        "permanent": {
                          "bounce": 4,
                          "delayed-bounce": 1,
                          "suppress-bounce": 1,
                          "suppress-unsubscribe": 2,
                          "suppress-complaint": 3,
                          "total": 10
                        },
                        "temporary": {
                          "espblock": 1
                        }
                      }
                    }
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/{mydomain}/stats": {
      "get": {
        "tags": [
          "Stats"
        ],
        "operationId": "getDomainStatItems",
        "summary": "Get stat items",
        "description": "Returns a list of event stats items. Each record represents counts for one event per one day.\n\n> **Warning**: This is the legacy API that should not be used.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Maximum number of records to return. (100 by default)",
            "example": "100"
          },
          {
            "name": "skip",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Number of records to skip. (0 by default)",
            "example": "0"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/{mydomain}/tags": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getDomainTags",
        "summary": "Get domain tags",
        "description": "Returns a list of tags for a domain. Provides pagination urls if the result set is too long to be returned in a single response.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/{mydomain}/tags/{tag}": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getDomainTag",
        "summary": "Get single tag",
        "description": "Returns a given tag.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tag",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "put": {
        "tags": [
          "Tags"
        ],
        "operationId": "updateDomainTag",
        "summary": "Update tag",
        "description": "Updates a given tag with the information provided.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "Name of the domain"
                  },
                  "tag": {
                    "type": "string",
                    "description": "Name of the tag"
                  },
                  "description": {
                    "type": "string",
                    "description": "Optional description of a tag"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tag",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Tags"
        ],
        "summary": "Delete tag",
        "operationId": "deleteDomainTag",
        "description": "Deletes the tag. Note: The statistics for the tag are not destroyed.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tag",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/{mydomain}/tags/{tag}/stats/aggregates/providers": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getDomainProviders",
        "summary": "Get domain providers",
        "description": "Returns a list of email providers for a given domain for different event types.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tag",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/{mydomain}/tags/{tag}/stats": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getTagStats",
        "summary": "Get tag stats",
        "description": "Returns statistics for a given tag.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "event",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "The type of the event. For a complete list of all events written to the log see the Event Types table below. (Required)",
            "example": "accepted"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tag",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/{mydomain}/tags/{tag}/stats/aggregates/countries": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getDomainCountries",
        "summary": "Get domain countries",
        "description": "Returns a list of countries of origin for a given domain for different event types.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tag",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/{mydomain}/tags/{tag}/stats/aggregates/devices": {
      "get": {
        "tags": [
          "Tags"
        ],
        "operationId": "getDomainDevices",
        "summary": "Get domain devices",
        "description": "Returns a list of devices for a given domain that have triggered event types.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "tag",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/{mydomain}/bounces": {
      "get": {
        "tags": [
          "Suppressions > Bounces"
        ],
        "operationId": "getBounces",
        "summary": "Get bounces",
        "description": "Paginate over a list of bounces for a domain.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "items": [
                    {
                      "address": "alice@example.com",
                      "code": "550",
                      "error": "No such mailbox",
                      "created_at": "Fri, 21 Oct 2011 11:02:55 GMT"
                    }
                  ],
                  "paging": {
                    "first": "<first page URL>",
                    "next": "<next page URL>",
                    "previous": "<previous page URL>",
                    "last": "<last page URL>"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Suppressions > Bounces"
        ],
        "operationId": "addBounce",
        "summary": "Add single bounce",
        "description": "Add a bounce record to the bounce list. Updates the existing record if the address is already there.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Valid email address"
                  },
                  "code": {
                    "type": "string",
                    "description": "Error code (optional, default: 550)"
                  },
                  "error": {
                    "type": "string",
                    "description": "Error description (optional, default: empty string)"
                  },
                  "created_at": {
                    "type": "string",
                    "description": "Timestamp of a bounce event in [RFC2822](https://documentation.mailgun.com/en/latest/api-intro.html#date-format) format (optional, default: current time)"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Suppressions > Bounces"
        ],
        "operationId": "deleteBounceList",
        "summary": "Delete bounce list",
        "description": "Add a bounce record to the bounce list. Updates the existing record if the address is already there.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "application/json"
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "4 addresses have been added to the bounces table"
                }
              }
            }
          }
        }
      }
    },
    "/{mydomain}/bounces/{address}": {
      "get": {
        "tags": [
          "Suppressions > Bounces"
        ],
        "operationId": "getBounce",
        "summary": "Get single bounce",
        "description": "Fetch a single bounce event by a given email address. Useful to check if a given email address has bounced before.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "address": "foo@bar.com",
                  "code": "550",
                  "error": "No such mailbox",
                  "created_at": "Fri, 21 Oct 2011 11:02:55 GMT"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Suppressions > Bounces"
        ],
        "operationId": "deleteBounce",
        "summary": "Delete bounce",
        "description": "Add a bounce record to the bounce list. Updates the existing record if the address is already there.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "application/json"
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "4 addresses have been added to the bounces table"
                }
              }
            }
          }
        }
      }
    },
    "/v3/{mydomain}/bounces": {
      "post": {
        "tags": [
          "Suppressions > Bounces"
        ],
        "operationId": "addBounces",
        "summary": "Add multiple bounces",
        "description": "Add a bounce record to the bounce list. Updates the existing record if the address is already there.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"[\\n  {\\n    \\\"address\\\": \\\"alice@example.com\\\",\\n    \\\"code\\\": \\\"550\\\",\\n    \\\"error\\\": \\\"Bounced\\\",\\n    \\\"created_at\\\": \\\"Thu, 13 Oct 2011 18:02:00 UTC\\\"\\n  },\\n  {\\n    \\\"address\\\": \\\"bob@example.com\\\",\\n    \\\"code\\\": \\\"550\\\",\\n    \\\"error\\\": \\\"Bounced\\\"\\n  },\\n  {\\n    \\\"address\\\": \\\"carol@example.com\\\",\\n    \\\"code\\\": \\\"550\\\"\\n  },\\n  {\\n    \\\"address\\\": \\\"dan@example.com\\\"\\n  }\\n]\\n\""
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "application/json"
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "4 addresses have been added to the bounces table"
                }
              }
            }
          }
        }
      }
    },
    "/{mydomain}/complaints": {
      "get": {
        "tags": [
          "Suppressions > Complaints"
        ],
        "operationId": "getComplaints",
        "summary": "Get all complaints",
        "description": "Add multiple unsubscribe records to the unsubscribe list in a single API call.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "4 addresses have been added to the bounces table"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Suppressions > Complaints"
        ],
        "operationId": "addComplaints",
        "summary": "Add multiple complaints",
        "description": "Add multiple unsubscribe records to the unsubscribe list in a single API call.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"[\\n  {\\n    \\\"address\\\": \\\"alice@example.com\\\",\\n    \\\"created_at\\\": \\\"Thu, 13 Oct 2011 18:02:00 UTC\\\"\\n  },\\n  {\\n    \\\"address\\\": \\\"bob@example.com\\\"\\n  }\\n]\""
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "application/json"
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "4 addresses have been added to the bounces table"
                }
              }
            }
          }
        }
      }
    },
    "/{mydomain}/complaints/{address}": {
      "get": {
        "tags": [
          "Suppressions > Complaints"
        ],
        "operationId": "getComplaint",
        "summary": "Get single complaint",
        "description": "Add multiple unsubscribe records to the unsubscribe list in a single API call.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "application/json"
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "4 addresses have been added to the bounces table"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Suppressions > Complaints"
        ],
        "operationId": "deleteComplaint",
        "summary": "Delete single complaint",
        "description": "Remove a given spam complaint.",
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "application/json"
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "4 addresses have been added to the bounces table"
                }
              }
            }
          }
        }
      }
    },
    "/v3/{mydomain}/complaints": {
      "post": {
        "tags": [
          "Suppressions > Complaints"
        ],
        "operationId": "addComplaint",
        "summary": "Add single complaint",
        "description": "Add multiple unsubscribe records to the unsubscribe list in a single API call.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Valid email address"
                  },
                  "created_at": {
                    "type": "string",
                    "description": "Timestamp of a complaint event in RFC2822 format (optional, default: current time)"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "application/json"
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "4 addresses have been added to the bounces table"
                }
              }
            }
          }
        }
      }
    },
    "/{mydomain}/unsubscribes": {
      "get": {
        "tags": [
          "Suppressions > Unsubscribes"
        ],
        "operationId": "getDomainUnsubscribes",
        "summary": "Get domain unsubscribes",
        "description": "Paginate over a list of unsubscribes for a domain.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "4 addresses have been added to the bounces table"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Suppressions > Unsubscribes"
        ],
        "operationId": "addDomainUnsubscribes",
        "summary": "Add multiple unsubscribes",
        "description": "Add multiple unsubscribe records to the unsubscribe list in a single API call.",
        "requestBody": {
          "content": {
            "*/*": {
              "schema": {
                "type": "string",
                "example": "\"[\\n  {\\n    \\\"address\\\": \\\"alice@example.com\\\",\\n    \\\"tags\\\": [\\\"some tag\\\"],\\n    \\\"created_at\\\": \\\"Thu, 13 Oct 2011 18:02:00 UTC\\\"\\n  },\\n  {\\n    \\\"address\\\": \\\"bob@example.com\\\",\\n    \\\"tags\\\": [\\\"*\\\"]\\n  },\\n  {\\n    \\\"address\\\": \\\"carol@example.com\\\"\\n  }\\n]\""
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Content-Type",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "application/json"
          },
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "4 addresses have been added to the bounces table"
                }
              }
            }
          }
        }
      }
    },
    "/{mydomain}/unsubscribes/{address}": {
      "get": {
        "tags": [
          "Suppressions > Unsubscribes"
        ],
        "operationId": "getDomainUnsubscribe",
        "summary": "Get single unsubscribe",
        "description": "Paginate over a list of unsubscribes for a domain.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "4 addresses have been added to the bounces table"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Suppressions > Unsubscribes"
        ],
        "operationId": "deleteDomainUnsubscribe",
        "summary": "Delete single unsubscribe",
        "description": "Add multiple unsubscribe records to the unsubscribe list in a single API call.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "4 addresses have been added to the bounces table"
                }
              }
            }
          }
        }
      }
    },
    "/routes": {
      "get": {
        "tags": [
          "Routes"
        ],
        "operationId": "getRoutes",
        "summary": "Get routes",
        "description": "Fetches the list of routes. Note that routes are defined globally, per account, not per domain as most of other API calls.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string",
                  "example": "Content-Type, x-requested-with"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string",
                  "example": "GET, POST, PUT, DELETE, OPTIONS"
                }
              },
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string",
                  "example": "*"
                }
              },
              "Access-Control-Max-Age": {
                "schema": {
                  "type": "integer",
                  "example": "600"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Content-Disposition": {
                "schema": {
                  "type": "string",
                  "example": "inline"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "37"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Mon, 27 Aug 2018 15:34:23 GMT"
                }
              },
              "Server": {
                "schema": {
                  "type": "string",
                  "example": "nginx"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "total_count": 266,
                  "items": [
                    {
                      "description": "Sample route",
                      "created_at": "Wed, 15 Feb 2012 12:58:12 GMT",
                      "actions": [
                        "forward(\"http://myhost.com/messages/\")",
                        "stop()"
                      ],
                      "priority": 0,
                      "expression": "match_recipient(\".*@samples.mailgun.org\")",
                      "id": "4f3babe4ba8a481c6400476a"
                    }
                  ]
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Routes"
        ],
        "operationId": "createRoute",
        "summary": "Create route",
        "description": "Creates a new route.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "priority": {
                    "type": "string",
                    "description": "Integer: smaller number indicates higher priority. Higher priority routes are handled first. Defaults to 0."
                  },
                  "description": {
                    "type": "string",
                    "description": "An arbitrary string."
                  },
                  "expression": {
                    "type": "string",
                    "description": "A filter expression like `match_recipient('.*@gmail.com')`"
                  },
                  "action": {
                    "type": "string",
                    "description": "Route action. This action is executed when the expression evaluates to True. Example: `forward(\"alice@example.com\")` You can pass multiple `action` parameters."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Mon, 27 Aug 2018 15:34:31 GMT"
                }
              },
              "Server": {
                "schema": {
                  "type": "string",
                  "example": "nginx"
                }
              },
              "Www-Authenticate": {
                "schema": {
                  "type": "string",
                  "example": "Basic realm=\"MG API\""
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "Route has been created",
                  "route": {
                    "description": "Sample route",
                    "created_at": "Wed, 15 Feb 2012 13:03:31 GMT",
                    "actions": [
                      "forward(\"http://myhost.com/messages/\")",
                      "stop()"
                    ],
                    "priority": 0,
                    "expression": "match_recipient(\".*@samples.mailgun.org\")",
                    "id": "4f3bad2335335426750048c6"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/routes/{route}": {
      "post": {
        "tags": [
          "Routes"
        ],
        "operationId": "getRoute",
        "summary": "Get single route",
        "description": "Returns a single route object based on its ID.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object"
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "route",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "route": {
                    "description": "Sample route",
                    "created_at": "Wed, 15 Feb 2012 13:03:31 GMT",
                    "actions": [
                      "forward(\"http://myhost.com/messages/\")",
                      "stop()"
                    ],
                    "priority": 0,
                    "expression": "match_recipient(\".*@samples.mailgun.org\")",
                    "id": "4f3bad2335335426750048c6"
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Routes"
        ],
        "operationId": "updateRoute",
        "summary": "Update route",
        "description": "Updates a given route by ID. All parameters are optional: this API call only updates the specified fields leaving others unchanged.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string",
                    "description": "ID of the route"
                  },
                  "priority": {
                    "type": "string",
                    "description": "Integer: smaller number indicates higher priority. Higher priority routes are handled first."
                  },
                  "description": {
                    "type": "string",
                    "description": "An arbitrary string"
                  },
                  "expression": {
                    "type": "string",
                    "description": "A filter expression like match_recipient('.*@gmail.com')"
                  },
                  "action": {
                    "type": "string",
                    "description": "Route action. This action is executed when the expression evaluates to True. Example: forward(\"alice@example.com\") You can pass multiple action parameters."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "route",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/{mydomain}/routes/{id}": {
      "delete": {
        "tags": [
          "Routes"
        ],
        "operationId": "deleteRoute",
        "summary": "Delete route",
        "description": "Deletes a route based on the id.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "id",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/domains/{mydomain}/webhooks": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "operationId": "getWebhooks",
        "summary": "Get webhooks",
        "description": "Returns a list of webhooks set for the specified domain.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Access-Control-Allow-Headers": {
                "schema": {
                  "type": "string",
                  "example": "Content-Type, x-requested-with"
                }
              },
              "Access-Control-Allow-Methods": {
                "schema": {
                  "type": "string",
                  "example": "GET, POST, PUT, DELETE, OPTIONS"
                }
              },
              "Access-Control-Allow-Origin": {
                "schema": {
                  "type": "string",
                  "example": "*"
                }
              },
              "Access-Control-Max-Age": {
                "schema": {
                  "type": "integer",
                  "example": "600"
                }
              },
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Content-Disposition": {
                "schema": {
                  "type": "string",
                  "example": "inline"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "20"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Wed, 22 Aug 2018 19:16:05 GMT"
                }
              },
              "Server": {
                "schema": {
                  "type": "string",
                  "example": "nginx"
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "webhooks": {
                    "opened": {
                      "urls": [
                        "https://your_domain.com/v1/opened",
                        "https://your_domain.com/v2/opened"
                      ]
                    },
                    "clicked": {
                      "urls": [
                        "https://your_domain.com/v1/clicked"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Webhooks"
        ],
        "operationId": "createWebhook",
        "summary": "Create webhook",
        "description": "Creates a new webhook. Note When adding a Clicked or Opened webhook, ensure that you also have tracking enabled.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "Name of the domain"
                  },
                  "id": {
                    "type": "string",
                    "description": "Name of the webhook"
                  },
                  "url": {
                    "type": "string",
                    "description": "URL for the webhook event. May be repeated up to 3 times. "
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "Webhook has been created",
                  "webhook": {
                    "urls": [
                      "https://your_domain.com/v1/clicked",
                      "https://your_domain.com/v2/clicked",
                      "https://your_partner_domain.com/v1/clicked"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/domains/{mydomain}/webhooks/{webhookname}": {
      "get": {
        "tags": [
          "Webhooks"
        ],
        "operationId": "getWebhookDetails",
        "summary": "Get webhook details",
        "description": "Returns details about a the webhook specified in the URL.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "webhookname",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "webhook": {
                    "urls": [
                      "https://your_domain.com/v1/clicked"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "Webhooks"
        ],
        "operationId": "updateWebhook",
        "summary": "Update webhook",
        "description": "Updates an existing webhook.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "domain": {
                    "type": "string",
                    "description": "Name of the webhook"
                  },
                  "webhookname": {
                    "type": "string",
                    "description": "Name of the webhook"
                  },
                  "url": {
                    "type": "string",
                    "description": "URL for the webhook event. May be repeated up to 3 times."
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "webhookname",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "Webhook has been updated",
                  "webhook": {
                    "urls": [
                      "https://your_domain.com/v1/clicked"
                    ]
                  }
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Webhooks"
        ],
        "operationId": "deleteWebhook",
        "summary": "Delete webhook",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "mydomain",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "webhookname",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "Webhook has been deleted",
                  "webhook": {
                    "urls": [
                      "https://your_domain.com/v1/clicked",
                      "https://your_domain.com/v2/clicked",
                      "https://your_partner_domain.com/v1/clicked"
                    ]
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lists/pages": {
      "get": {
        "tags": [
          "Mailing Lists"
        ],
        "operationId": "getLists",
        "summary": "Get mailing lists",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Maximum number of records to return (optional: 100 by default)",
            "example": "100"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "items": [
                    {
                      "access_level": "everyone",
                      "address": "dev@samples.mailgun.org",
                      "created_at": "Tue, 06 Mar 2012 05:44:45 GMT",
                      "description": "Mailgun developers list",
                      "members_count": 1,
                      "name": ""
                    },
                    {
                      "access_level": "readonly",
                      "address": "bar@example.com",
                      "created_at": "Wed, 06 Mar 2013 11:39:51 GMT",
                      "description": "",
                      "members_count": 2,
                      "name": ""
                    }
                  ],
                  "paging": {
                    "first": "https://url_to_next_page",
                    "last": "https://url_to_last_page",
                    "next": "https://url_to_next_page",
                    "previous": "https://url_to_previous_page"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lists/{address}": {
      "get": {
        "tags": [
          "Mailing Lists"
        ],
        "operationId": "getList",
        "summary": "Get single mailing list by address",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "put": {
        "tags": [
          "Mailing Lists"
        ],
        "operationId": "updateList",
        "summary": "Update mailing list",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "New mailing list address, e.g. devs@mg.net (optional)"
                  },
                  "name": {
                    "type": "string",
                    "description": "New name, e.g. My newsletter (optional)"
                  },
                  "description": {
                    "type": "string",
                    "description": "Description string (optional)"
                  },
                  "access_level": {
                    "type": "string",
                    "description": "List access level, one of: readonly (default), members, everyone"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Mailing Lists"
        ],
        "operationId": "deleteList",
        "summary": "Delete mailing list",
        "description": "Deletes a mailing list.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/lists": {
      "post": {
        "tags": [
          "Mailing Lists"
        ],
        "operationId": "createList",
        "summary": "Create mailing list",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "A valid email address for the mailing list, e.g. developers@mailgun.net, or Developers <devs@mg.net>"
                  },
                  "name": {
                    "type": "string",
                    "description": "Mailing list name, e.g. Developers (optional)"
                  },
                  "description": {
                    "type": "string",
                    "description": "A description (optional)"
                  },
                  "access_level": {
                    "type": "string",
                    "description": "List access level, one of: readonly (default), members, everyone"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "Mailing list has been created",
                  "list": {
                    "created_at": "Tue, 06 Mar 2012 05:44:45 GMT",
                    "address": "dev@samples.mailgun.org",
                    "members_count": 0,
                    "description": "Mailgun developers list",
                    "name": ""
                  }
                }
              }
            }
          }
        }
      }
    },
    "/lists/{address}/members/pages": {
      "get": {
        "tags": [
          "Mailing Lists"
        ],
        "operationId": "getListMembers",
        "summary": "Get mailing list members",
        "description": "Paginate over list members in the given mailing list",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "subscribed",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "description": "yes to lists subscribed, no for unsubscribed. list all if not set"
          },
          {
            "name": "limit",
            "in": "query",
            "schema": {
              "type": "integer"
            },
            "description": "Maximum number of records to return (optional: 100 by default)",
            "example": "100"
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/lists/{address}/members/{memberaddress}": {
      "get": {
        "tags": [
          "Mailing Lists"
        ],
        "operationId": "getListMember",
        "summary": "Get mailing list member",
        "description": "Retrieves a mailing list member.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "memberaddress",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "put": {
        "tags": [
          "Mailing Lists"
        ],
        "operationId": "updateListMember",
        "summary": "Update mailing list member",
        "description": "Updates a mailing list member with given properties. Won’t touch the property if it’s not passed in.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Valid email address specification, e.g. Alice <alice@example.com> or just alice@example.com"
                  },
                  "name": {
                    "type": "string",
                    "description": "Recipient name, e.g. Alice"
                  },
                  "vars": {
                    "type": "string",
                    "description": "JSON-encoded dictionary string with arbitrary parameters, e.g. {\"gender\":\"female\",\"age\":27}"
                  },
                  "subscribed": {
                    "type": "string",
                    "description": "no to set unsubscribed, yes as subscribed"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "memberaddress",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Mailing Lists"
        ],
        "operationId": "deleteListMember",
        "summary": "Delete member from mailing list",
        "description": "Delete a mailing list member.",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          },
          {
            "name": "memberaddress",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/lists/{address}/members": {
      "post": {
        "tags": [
          "Mailing Lists"
        ],
        "operationId": "addListMember",
        "summary": "Add member to mailing list",
        "description": "Adds a member to the mailing list.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "address": {
                    "type": "string",
                    "description": "Valid email address specification, e.g. Alice <alice@example.com> or just alice@example.com"
                  },
                  "name": {
                    "type": "string",
                    "description": "Optional member name"
                  },
                  "vars": {
                    "type": "string",
                    "description": "JSON-encoded dictionary string with arbitrary parameters, e.g. {\"gender\":\"female\",\"age\":27}"
                  },
                  "subscribed": {
                    "type": "string",
                    "description": "yes to add as subscribed (default), no as unsubscribed"
                  },
                  "upsert": {
                    "type": "string",
                    "description": "yes to update member if present, no to\nraise error in case of a duplicate member (default)"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized",
            "headers": {
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Wed, 22 Aug 2018 21:47:37 GMT"
                }
              },
              "Server": {
                "schema": {
                  "type": "string",
                  "example": "nginx"
                }
              },
              "Www-Authenticate": {
                "schema": {
                  "type": "string",
                  "example": "Basic realm=\"MG API\""
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "member": {
                    "vars": {
                      "age": 26
                    },
                    "name": "Bob Bar",
                    "subscribed": true,
                    "address": "bar@example.com"
                  },
                  "message": "Mailing list member has been created"
                }
              }
            }
          }
        }
      }
    },
    "/lists/{address}/members.json": {
      "post": {
        "tags": [
          "Mailing Lists"
        ],
        "operationId": "addListMembers",
        "summary": "Add multiple members to mailing list",
        "description": "Adds multiple members, up to 1,000 per call, to a Mailing List.",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "type": "object",
                "properties": {
                  "members": {
                    "type": "string",
                    "description": "JSON-encoded array. Elements can be either addresses, e.g. [\"bob@example.com\", \"alice@example.com\"], or JSON objects, e.g. [{\"address\": \"bob@example.com\", \"name\": \"Bob\", \"subscribed\": false}, {\"address\": \"alice@example.com\", \"name\": \"Alice\"}] . Custom variables can be provided, see examples."
                  },
                  "upsert": {
                    "type": "string",
                    "description": "yes to update existing members, no (default) to ignore duplicates"
                  }
                }
              }
            }
          }
        },
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          },
          {
            "name": "address",
            "in": "path",
            "schema": {
              "type": "string"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/address/validate": {
      "get": {
        "tags": [
          "Email Validation"
        ],
        "operationId": "validateAddress",
        "summary": "Validate address",
        "description": "| Field Explanation:    |         |                                                                                                                         |\n|-----------------------|---------|-------------------------------------------------------------------------------------------------------------------------|\n|                       |         |                                                                                                                         |\n| Parameter             | Type    | Description                                                                                                             |\n| address               | string  | Email address being validated                                                                                           |\n| did_you_mean          | string  | Null if nothing, however if a potential typo is made, the closest suggestion is provided                                |\n| is_disposable_address | boolean | If the domain is in a list of disposable email addresses, this will be appropriately categorized                        |\n| is_role_address       | boolean | Checks the mailbox portion of the email if it matches a specific role type (‘admin’, ‘sales’, ‘webmaster’)              |\n| is_valid              | boolean | Runs the email segments across a valid known provider rule list. If a violation occurs this value is false              |\n| mailbox_verification  | string  | If the mail_verification flag is enabled, a call is made to the ESP to return existence. (true, false, unknown or null) |\n| parts                 | string  | (display_name, domain, local_part): Parsed segments of the provided email address                                       |",
        "security": [
          {
            "basicAuth": []
          }
        ],
        "parameters": [
          {
            "name": "address",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "foo@bar.com"
          },
          {
            "name": "api_key",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "pub-key"
          },
          {
            "name": "mailbox_verification",
            "in": "query",
            "schema": {
              "type": "boolean"
            },
            "example": "true"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "headers": {
              "Connection": {
                "schema": {
                  "type": "string",
                  "example": "keep-alive"
                }
              },
              "Content-Length": {
                "schema": {
                  "type": "integer",
                  "example": "0"
                }
              },
              "Content-Type": {
                "schema": {
                  "type": "string",
                  "example": "application/json"
                }
              },
              "Date": {
                "schema": {
                  "type": "string",
                  "example": "Mon, 27 Aug 2018 19:59:18 GMT"
                }
              },
              "Server": {
                "schema": {
                  "type": "string",
                  "example": "nginx"
                }
              },
              "Www-Authenticate": {
                "schema": {
                  "type": "string",
                  "example": "Basic realm=\"MG API\""
                }
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "address": "foo@mailgun.net",
                  "did_you_mean": null,
                  "is_disposable_address": false,
                  "is_role_address": false,
                  "is_valid": true,
                  "mailbox_verification": null,
                  "parts": {
                    "display_name": null,
                    "domain": "mailgun.net",
                    "local_part": "foo"
                  },
                  "reason": null
                }
              }
            }
          }
        }
      }
    },
    "/address/parse": {
      "get": {
        "tags": [
          "Email Validation"
        ],
        "operationId": "parseList",
        "summary": "Parse email address list",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "parsed": [
                    "Alice <alice@example.com>",
                    "bob@example.com"
                  ],
                  "unparseable": []
                }
              }
            }
          }
        }
      }
    },
    "/address/private/validate": {
      "get": {
        "tags": [
          "Email Validation"
        ],
        "operationId": "validateAddressPrivate",
        "summary": "Validate address (private)",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    },
    "/address/private/varse": {
      "get": {
        "tags": [
          "Email Validation"
        ],
        "operationId": "parseListPrivate",
        "summary": "Parse email address list (private)",
        "parameters": [
          {
            "name": "Authorization",
            "in": "header",
            "schema": {
              "type": "string"
            },
            "example": "Basic {{token}}"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful response",
            "content": {
              "application/json": {}
            }
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "basicAuth": {
        "type": "http",
        "scheme": "basic"
      }
    },
    "schemas": {
      "Credential": {
        "type": "object",
        "properties": {
          "size_bytes": {
            "type": "integer",
            "example": 0
          },
          "created_at": {
            "type": "string",
            "example": "Tue, 27 Sep 2011 20:24:22 GMT"
          },
          "mailbox": {
            "type": "string",
            "example": "user@samples.mailgun.org"
          },
          "login": {
            "type": "string",
            "example": "user@samples.mailgun.org"
          }
        }
      },
      "ReceivingDnsRecord": {
        "type": "object",
        "properties": {
          "cached": {
            "type": "array",
            "items": {}
          },
          "priority": {
            "type": "string"
          },
          "record_type": {
            "type": "string"
          },
          "valid": {
            "type": "string"
          },
          "value": {
            "type": "string"
          }
        }
      },
      "SendingDnsRecord": {
        "type": "object",
        "properties": {
          "cached": {
            "type": "array",
            "items": {}
          },
          "name": {
            "type": "string",
            "description": "The name of the DNS record."
          },
          "record_type": {
            "type": "string",
            "description": "The type of DNS record."
          },
          "valid": {
            "type": "string",
            "description": "The validation status of the DNS record."
          },
          "value": {
            "type": "string",
            "description": "The value of the DNS record."
          }
        }
      },
      "Domain": {
        "type": "object",
        "properties": {
          "created_at": {
            "type": "string",
            "description": "The date and time when the domain was created."
          },
          "id": {
            "type": "string",
            "description": "The unique identifier for the domain."
          },
          "is_disabled": {
            "type": "boolean",
            "description": "Indicates whether the domain is disabled."
          },
          "name": {
            "type": "string",
            "description": "The name of the domain."
          },
          "require_tls": {
            "type": "boolean",
            "description": "Indicates whether TLS is required for the domain."
          },
          "skip_verification": {
            "type": "boolean",
            "description": "Indicates whether verification is skipped for the domain."
          },
          "smtp_login": {
            "type": "string",
            "description": "The SMTP login for the domain."
          },
          "spam_action": {
            "type": "string",
            "description": "The action taken when spam is detected for the domain."
          },
          "state": {
            "type": "string",
            "description": "The current state of the domain."
          },
          "type": {
            "type": "string",
            "description": "The type of the domain."
          },
          "web_prefix": {
            "type": "string",
            "description": "The web prefix for the domain."
          },
          "web_scheme": {
            "type": "string",
            "description": "The web scheme for the domain."
          },
          "wildcard": {
            "type": "boolean",
            "description": "Indicates whether the domain is a wildcard domain."
          }
        }
      },
      "DeleteCredentialsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          },
          "spec":{
            "type":"string"
          }
        }
      },
      "GetConnectionResponse": {
        "type": "object",
        "properties": {
          "connection": {
            "type": "object",
            "properties": {
              "require_tls": {
                "type": "boolean"
              },
              "skip_verification": {
                "type": "boolean"
              }
            }
          }
        }
      },
      "ConnectionUpdate":{
       "type":"object",
       "properties": {
        "message":{
          "type":"string"
        },
        "connection":{
          "type":"object",
          "properties":{
            "require_tls":{
              "type":"boolean"
            },
            "skip_verification":{
              "type":"boolean"
            }
          }
        }
       }
      },
      "SuccessResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string"
          }
        }
      },
      "GetCredentialsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Credential"
            }
          },
          "total_count": {
            "type": "number"
          }
        }
      },
      "GetDomainsResponse": {
        "type": "object",
        "properties": {
          "items": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Domain"
            }
          },
          "total_count": {
            "type": "number"
          }
        }
      },
      "DomainResponse": {
        "type": "object",
        "properties": {
          "domain": {
            "$ref": "#/components/schemas/Domain"
          },
          "message": {
            "type": "string"
          },
          "receiving_dns_records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ReceivingDnsRecord"
            }
          },
          "sending_dns_records": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SendingDnsRecord"
            }
          }
        }
      },
      "Attachment": {
        "type": "object",
        "properties": {
          "size": {
            "type": "integer",
            "description": "Indicates the size of the attachment in bytes."
          },
          "url": {
            "type": "string",
            "description": "Contains the URL where the attachment can be found. This does not support DELETE."
          },
          "name": {
            "type": "string",
            "description": "The name of the attachment."
          },
          "content-type": {
            "type": "string",
            "description": "The content type of the attachment."
          }
        }
      },
      "StoredMessage": {
        "type": "object",
        "properties": {
          "recipients": {
            "type": "string",
            "description": "Recipient of the message as reported by MAIL TO during SMTP chat."
          },
          "sender": {
            "type": "string",
            "description": "Sender of the message as reported by MAIL FROM during SMTP chat. Note: this value may differ from From MIME header."
          },
          "from": {
            "type": "string",
            "description": "Sender of the message as reported by From message header, for example “Bob Lee <blee@mailgun.net>”."
          },
          "subject": {
            "type": "string",
            "description": "Subject string."
          },
          "body-plain": {
            "type": "string",
            "description": "Text version of the email. This field is always present. If the incoming message only has HTML body, Mailgun will create a text representation for you."
          },
          "stripped-text": {
            "type": "string",
            "description": "Text version of the message without quoted parts and signature block (if found)."
          },
          "stripped-signature": {
            "type": "string",
            "description": "The signature block stripped from the plain text message (if found)."
          },
          "body-html": {
            "type": "string",
            "description": "HTML version of the message, if message was multipart. Note that all parts of the message will be posted, not just text/html. For instance if a message arrives with “foo” part it will be posted as “body-foo”."
          },
          "stripped-html": {
            "type": "string",
            "description": "HTML version of the message, without quoted parts."
          },
          "attachments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Attachment"
            },
            "description": "Contains a json list of metadata objects, one for each attachment, see below."
          },
          "message-headers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "List of all MIME headers dumped to a json string (order of headers preserved)."
          },
          "content-id-map": {
            "type": "object",
            "description": "JSON-encoded dictionary which maps Content-ID (CID) of each attachment to the corresponding attachment-x parameter. This allows you to map posted attachments to tags like <img src='cid'> in the message body."
          }
        }
      }
    }
  }
}
